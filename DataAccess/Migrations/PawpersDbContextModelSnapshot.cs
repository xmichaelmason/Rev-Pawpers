// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(PawpersDbContext))]
    partial class PawpersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category_name");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Models.Dwelling", b =>
                {
                    b.Property<int>("DwellingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dwelling_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DwellingType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("dwelling_type");

                    b.HasKey("DwellingId");

                    b.ToTable("Dwelling");
                });

            modelBuilder.Entity("Models.Favorite", b =>
                {
                    b.Property<int>("FavId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fav_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DogId")
                        .HasColumnType("int")
                        .HasColumnName("dog_id");

                    b.Property<int>("IsAvailable")
                        .HasColumnType("int")
                        .HasColumnName("is_available");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    b.HasKey("FavId")
                        .HasName("PK__Favorite__9694C47596BC756E");

                    b.HasIndex("ProfileId");

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("Models.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("profile_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProfileAdoptionreason")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_adoptionreason");

                    b.Property<int>("ProfileAge")
                        .HasColumnType("int")
                        .HasColumnName("profile_age");

                    b.Property<int>("ProfileChildren")
                        .HasColumnType("int")
                        .HasColumnName("profile_children");

                    b.Property<string>("ProfileCity")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_city");

                    b.Property<string>("ProfileDogaggresive")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_dogaggresive");

                    b.Property<string>("ProfileDogsleepat")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_dogsleepat");

                    b.Property<int>("ProfileDwellingid")
                        .HasColumnType("int")
                        .HasColumnName("profile_dwellingid");

                    b.Property<string>("ProfileEmail")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_email");

                    b.Property<int>("ProfileFamilyallergies")
                        .HasColumnType("int")
                        .HasColumnName("profile_familyallergies");

                    b.Property<int>("ProfileHasyard")
                        .HasColumnType("int")
                        .HasColumnName("profile_hasyard");

                    b.Property<string>("ProfileHomephone")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("profile_homephone");

                    b.Property<string>("ProfileLandlordname")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_landlordname");

                    b.Property<string>("ProfileLandlordphone")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("profile_landlordphone");

                    b.Property<string>("ProfileMedfordog")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_medfordog");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_name");

                    b.Property<string>("ProfileNocaredog")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_nocaredog");

                    b.Property<string>("ProfileOccupation")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_occupation");

                    b.Property<int?>("ProfileOtherpetage")
                        .HasColumnType("int")
                        .HasColumnName("profile_otherpetage");

                    b.Property<string>("ProfileOtherpetbreed")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_otherpetbreed");

                    b.Property<string>("ProfileOtherpetname")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_otherpetname");

                    b.Property<string>("ProfileOtherpetsex")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("profile_otherpetsex");

                    b.Property<string>("ProfilePersonalphone")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("profile_personalphone");

                    b.Property<string>("ProfileResponsiblefordog")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_responsiblefordog");

                    b.Property<string>("ProfileSpousename")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_spousename");

                    b.Property<int>("ProfileStateid")
                        .HasColumnType("int")
                        .HasColumnName("profile_stateid");

                    b.Property<string>("ProfileStreetaddress")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("profile_streetaddress");

                    b.Property<string>("ProfileZipcode")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("profile_zipcode");

                    b.HasKey("ProfileId");

                    b.HasIndex("ProfileDwellingid");

                    b.HasIndex("ProfileStateid");

                    b.HasIndex(new[] { "ProfileEmail" }, "UQ__Profile__B7578BECA5F10BA7")
                        .IsUnique();

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("Models.Reply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reply_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    b.Property<string>("ReplyMessage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("reply_message");

                    b.Property<DateTime?>("ReplyTimestamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("reply_timestamp");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int")
                        .HasColumnName("topic_id");

                    b.HasKey("ReplyId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TopicId");

                    b.ToTable("Reply");
                });

            modelBuilder.Entity("Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("state_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StateCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .HasColumnName("state_code")
                        .IsFixedLength(true);

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("state_name");

                    b.HasKey("StateId");

                    b.ToTable("state");
                });

            modelBuilder.Entity("Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("topic_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("PostTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("post_timestamp")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    b.Property<string>("TopicBody")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("topic_body");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("topic_name");

                    b.HasKey("TopicId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("Models.Favorite", b =>
                {
                    b.HasOne("Models.Profile", "Profile")
                        .WithMany("Favorites")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK__Favorite__profil__6E01572D")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Models.Profile", b =>
                {
                    b.HasOne("Models.Dwelling", "ProfileDwelling")
                        .WithMany("Profiles")
                        .HasForeignKey("ProfileDwellingid")
                        .HasConstraintName("pro_dwe_FK")
                        .IsRequired();

                    b.HasOne("Models.State", "ProfileState")
                        .WithMany("Profiles")
                        .HasForeignKey("ProfileStateid")
                        .HasConstraintName("pro_sta_FK")
                        .IsRequired();

                    b.Navigation("ProfileDwelling");

                    b.Navigation("ProfileState");
                });

            modelBuilder.Entity("Models.Reply", b =>
                {
                    b.HasOne("Models.Profile", "Profile")
                        .WithMany("Replies")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK__Reply__profile_i__71D1E811")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Topic", "Topic")
                        .WithMany("Replies")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("FK__Reply__topic_id__72C60C4A")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Profile");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Models.Topic", b =>
                {
                    b.HasOne("Models.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Topic__category___73BA3083");

                    b.HasOne("Models.Profile", "Profile")
                        .WithMany("Topics")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK__Topic__profile_i__6EF57B66");

                    b.Navigation("Category");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Models.Dwelling", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Models.Profile", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Replies");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Models.State", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Models.Topic", b =>
                {
                    b.Navigation("Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
